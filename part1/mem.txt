ft_memset
プロトタイプ：void	*ft_memset(void *str, int c, size_t len)
説明　　　　：一つ目の引数の文字列の最初から三つ目の引数分、二つ目の文字数に置き換える。
　　 　　　　(例)ft_memset(str1,'1',3)はstr1の１文字目から３バイト分、'1'に置き換える
パラメータ　：#1. セット先のメモリブロック（*str）
		　　#2. セットする文字（c）
		　　#3. セットバイト数（len）
コード解説　：unsigned char *ptr :lenバイト分置き換えるので1バイト1文字であるcharに置き換えると主に
								manにvalue c (converted to an unsigned char)と書いてあるので、
								strをunsigned char　＊に代入する。
								return値は第一引数(man)
------------------------------------------------------------------------------------------
ft_memcpy
プロトタイプ：void	*ft_memcpy(void *dst, const void *src, size_t n);
説明　　　　：srcの最初からnバイト分コピーしてdstの最初にコピーする。
　　　　　  （メモリ領域が重なった場合の処理は未定義）
パラメータ　：#1. コピー先のメモリブロック（*dst）
           #2. コピー元のメモリブロック（*src）
           #3.コピーバイト数 (n)
コード解説　：char			*dst_res;
　　　　　　　const char	*src_res;lenバイト分置き換えるので1バイト1文字であるcharに置き換えると主に
								   manにvalue c (converted to an unsigned char)と書いてあるので、
								   strをunsigned char　＊に代入する。
								   return値は第一引数dst(man)
-------------------------------------------------------------------------------------------
ft_memmove
プロトタイプ：void	*ft_memmove(void *dst, const void *src, size_t len);
説明　　　　：基本的にはmemcpyと機能は同じ。（メモリ領域が重なってもいる場合も定義されている）
　　　　　　　また、src を単なるメモリブロックとして扱うため、途中にヌル文字('\0')を含んでいてもコピーを続ける。
パラメータ　：#1. コピー先のメモリブロック（*dest）
　　　　　　　#2. コピー元のメモリブロック（*src）
　　　　　　　#3.コピーバイト数 (n)
コード解説　：lenがあるため、1文字1バイトであるchar *に代入する。
			if (d > s)でメモリの重なりを判定し、重なっている場合は後ろから代入する。
			return値はdst(manより).
質問　　　　：if (d > s)でメモリの重なりを判定できる理由
　　　　　　　またd[len] = s[len];の部分がsやdの範囲を超えている場合は存在しないメモリを指してエラーにならないのか
------------------------------------------------------------------------------------------
ft_memchr
プロトタイプ：void	*ft_memchr(const void *s, int c, size_t n);
説明　　　　：sの先頭からnバイト内でcと一致する文字を探し、その文字へのポインターを返す。
　　　　　　　もし文字が指定メモリー領域に現れない場合は NULL を返す。
パラメータ　：#1. 検索対象のメモリブロック（*s）
　　　　　　　#2. 検索文字（c）
　　　　　　　#3. 検索バイト数（n）
コード解説　：manより、c (converted to an unsigned char)と’書いてあるので,
			unsigned charで比較する。
------------------------------------------------------------------------------------------
ft_memcmp
プロトタイプ：int	ft_memcmp(void *s1, void *s2, size_t n)
説明　　　　：*s1と*s2を先頭からnバイト分比較します。
　　　　　　　※途中にNULL文字を含んでいても比較を続ける。
　　　　　　　(return)
			*s1 ＞ *s2の場合　　→正の値
			*s1 ＝ *s2の場合　　→0
			*s1  ＜ *s2の場合　　→負の値
パラメータ　：#1. 比較元メモリブロック1（*s1）
　　　　　　　#2. 比較元メモリブロック2（*s2）
　　　　　　　#3. 比較バイト数（n）
コード解説：nバイト分比較し、またmanより比較時にはunsigned charである必要があるので、
　　　　　　s1,s2ともにunsigned char *に代入する。
------------------------------------------------------------------------------------------